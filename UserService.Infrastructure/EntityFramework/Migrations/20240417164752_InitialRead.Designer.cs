// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserService.Infrastructure.EntityFramework.Contexts;

#nullable disable

namespace UserService.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    [Migration("20240417164752_InitialRead")]
    partial class InitialRead
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("user-service")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserService.Infrastructure.EntityFramework.Models.BannedUserReadModel", b =>
                {
                    b.Property<string>("IssuerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IssuerUserId", "ReceiverUserId");

                    b.HasIndex("ReceiverUserId");

                    b.ToTable("BannedUser", "user-service");
                });

            modelBuilder.Entity("UserService.Infrastructure.EntityFramework.Models.ContactRequestReadModel", b =>
                {
                    b.Property<string>("IssuerUserId")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("IssuerUserId", "ReceiverUserId");

                    b.HasIndex("ReceiverUserId");

                    b.ToTable("ContactRequest", "user-service");
                });

            modelBuilder.Entity("UserService.Infrastructure.EntityFramework.Models.UserReadModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserEmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserNickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("User", "user-service");
                });

            modelBuilder.Entity("UserService.Infrastructure.EntityFramework.Models.UserTrackingReadModel", b =>
                {
                    b.Property<Guid>("UserTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Referrer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("UserTrackingId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTracking", "user-service");
                });

            modelBuilder.Entity("UserService.Infrastructure.EntityFramework.Models.BannedUserReadModel", b =>
                {
                    b.HasOne("UserService.Infrastructure.EntityFramework.Models.UserReadModel", "Issuer")
                        .WithMany("IssuedBansByUser")
                        .HasForeignKey("IssuerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Issuer_BannedUsers");

                    b.HasOne("UserService.Infrastructure.EntityFramework.Models.UserReadModel", "Receiver")
                        .WithMany("ReceivedBansForUser")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Receiver_BannedUsers");

                    b.Navigation("Issuer");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("UserService.Infrastructure.EntityFramework.Models.ContactRequestReadModel", b =>
                {
                    b.HasOne("UserService.Infrastructure.EntityFramework.Models.UserReadModel", "Issuer")
                        .WithMany("IssuedContactRequests")
                        .HasForeignKey("IssuerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Issuer_ContactRequests");

                    b.HasOne("UserService.Infrastructure.EntityFramework.Models.UserReadModel", "Receiver")
                        .WithMany("ReceivedContactRequests")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Receiver_ContactRequests");

                    b.Navigation("Issuer");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("UserService.Infrastructure.EntityFramework.Models.UserTrackingReadModel", b =>
                {
                    b.HasOne("UserService.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("AuditTrail")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_User_AuditTrail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserService.Infrastructure.EntityFramework.Models.UserReadModel", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("IssuedBansByUser");

                    b.Navigation("IssuedContactRequests");

                    b.Navigation("ReceivedBansForUser");

                    b.Navigation("ReceivedContactRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
