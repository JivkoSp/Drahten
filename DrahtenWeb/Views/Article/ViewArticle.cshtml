@using DrahtenWeb.Dtos.TopicArticleService
@model ArticleViewModel

<div class="container">
    <div class="row mt-1">
        <div class="col-md-8 offset-md-2">
            <input id="articleId" type="hidden" value="@Model.Article.ArticleId" />
            <!-- Display the article title, author, date, and link -->
            <div class="article-header">
                <h1 class="display-5">@Model.Article.Title</h1>
                <p class="lead">By @Model.Article.Author on @Model.Article.PublishingDate</p>
                <p><a href="@Model.Article.Link" target="_blank">Read more</a></p>
            </div>
            <!-- Display the search bar -->
            <div class="search-bar mb-3">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search...">
                    <button class="btn btn-outline-secondary" type="button">Search</button>
                </div>
            </div>
            <hr>
            <!-- Display the article content -->
            <div id="article-data" class="article-data">
                @Model.Article.Content
            </div>
            <!-- Display the number of comments and likes for the article -->
            <p class="mt-4">
                <span id="comment-count">@Model.ArticleComments.Count</span> comments |
                <span id="like-count">@Model.Article.ArticleLikeDtos.Count</span> likes
            </p>
            <hr>
            <!-- Display the article summary -->
            <div class="article-summary">
                <h2>Article Summary</h2>
                <p id="article-summary">Generating summary for the article ...</p>
                <div id="article-summary-loader" class="loader"></div>
            </div>
            <hr>
            <!-- Display the questions section -->
            <div id="article-questions-container" class="questions">
                <h2>Questions about this article</h2>
                <p id="article-questions-user-message">Generating questions for the article ...</p>
                <div id="article-questions-loader" class="loader"></div>
            </div>
            <hr>
            <!-- Display the comment section -->
            <div class="comment-like">
                <!-- Display a button to toggle the comment form -->
                <button id="article-viewcomment-button" class="btn btn-primary">Comment section</button>
                <!-- Display a button to like the article -->
                <button id="article-like-button" class="btn btn-success">Like this article</button>
                <!-- Display a list of comments -->
                <div id="comment-list" class="mt-3">
                    <div id="comments-container" class="container mt-2">

                        @{
                            void DisplayChildArticles(ReadArticleCommentDto articleComment)
                            {
                                    <div class="comment mt-3">
                                        <p class="card-text shadow-sm rounded-3">@articleComment.CommentValue</p>
                                        <div id="comment-actions-@articleComment.ArticleCommentId" class="actions">
                                        <i id="thumbs-up-@articleComment.ArticleCommentId" class="fas fa-thumbs-up" onclick="registerUserCommentLike('@articleComment.ArticleCommentId')"></i> @articleComment.ArticleCommentLikeDtos.Count
                                        <i id="thumbs-down-@articleComment.ArticleCommentId" class="fas fa-thumbs-down" onclick="registerUserCommentDislike('@articleComment.ArticleCommentId')"></i> @articleComment.ArticleCommentDislikeDtos.Count
                                            <button class="btn btn-outline-dark btn-sm" onclick="registerUserComment('@articleComment.ArticleCommentId')">Reply</button>
                                            <span>@articleComment.Children?.Count replies</span>

                                            @{
                                                if(articleComment.Children != null)
                                                {
                                                    foreach(var childComment in articleComment.Children)
                                                    {
                                                        DisplayChildArticles(childComment);
                                                    }
                                                }
                                            }

                                        </div>
                                    </div>
                            }

                            if(Model.ArticleComments != null)
                            {
                                foreach(var comment in Model.ArticleComments)
                                {
                                    if(comment.ParentArticleCommentId == null)
                                    {
                                            <div class="card shadow rounded-3 mb-3">
                                                <div class="card-body">
                                                <h5 class="card-title">@Model.Users.FirstOrDefault(x => x.UserId == Guid.Parse(comment.UserId))?.UserNickName</h5>
                                                    <p class="card-text shadow-sm rounded-3">@comment.CommentValue</p>
                                                    <div id="comment-actions-@comment.ArticleCommentId" class="actions">
                                                    <i id="thumbs-up-@comment.ArticleCommentId" class="fas fa-thumbs-up" onclick="registerUserCommentLike('@comment.ArticleCommentId')"></i> @comment.ArticleCommentLikeDtos.Count
                                                    <i id="thumbs-down-@comment.ArticleCommentId" class="fas fa-thumbs-down" onclick="registerUserCommentDislike('@comment.ArticleCommentId')"></i> @comment.ArticleCommentDislikeDtos.Count
                                                    <button class="btn btn-outline-dark btn-sm" onclick="registerUserComment('@comment.ArticleCommentId')">Reply</button>
                                                        <span>@comment.Children.Count replies</span>

                                                        @{
                                                        if (comment.Children != null)
                                                        {
                                                            foreach (var childComment in comment.Children)
                                                            {
                                                                DisplayChildArticles(childComment);
                                                            }
                                                        }
                                                        }

                                                    </div>
                                                </div>
                                            </div>
                                    }        
                                } 
                            }
                        }

                        <div class="input-group mb-3">
                            <textarea id="user-comment" class="form-control comment-textarea" placeholder="Write a comment..." rows="3"></textarea>
                            <span class="ms-1">
                                <button id="user-comment-button" type="button" class="btn btn-primary">Comment</button>
                            </span>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="~/lib/jquery/dist/jquery.js"></script>
    <script>
        $("document").ready(() => {

            const articleId = $("#articleId").val();

            //Send ajax HTTP GET request to /Article/ArticleSummary.
            $.ajax({
                type: 'GET',
                url: '/Article/ArticleSummary',
                data: {
                    'articleId': articleId
                },
                success: (response) => {

                    if (response != null) {

                        $("#article-summary").text(response.documentSummary);
                    }
                },
                complete: () => {

                    $("#article-summary-loader").hide(); 
                },
                failure: (reponse) => {
                    console.log("failure", response);
                },
                error: (response) => {
                    console.log("error", response);
                }
            });


            //Send ajax HTTP GET request to /Article/ArticleQuestions.
            $.ajax({
                type: 'GET',
                url: '/Article/ArticleQuestions',
                data: {
                    'articleId': articleId
                },
                success: (response) => {

                    if (response != null) {

                        $("#article-questions-user-message").hide();

                        const ulElementArticleQuestionsList = $("<ul>", {
                            class: "list-group gap-3"
                        });

                        response.forEach((element) => {

                            const liElementArticleQuestion = $("<li>", {                               
                                class: "list-group-item article-question-list-item"
                            });

                            liElementArticleQuestion.text(element);

                            liElementArticleQuestion.on("click", () => {

                                //Send ajax HTTP GET request to /Article/ArticleSemanticSearch.
                                $.ajax({
                                    type: 'GET',
                                    url: '/Article/ArticleSemanticSearch',
                                    data: {
                                        'articleId': articleId,
                                        'question': element
                                    },
                                    success: (response) => {

                                        if (response != null) {

                                            const highlightedText = highlightMatchingText(response.document.article_data, 
                                                                                          response.context,
                                                                                          response.answer);

                                            $("#article-data").html(highlightedText);
                                        }
                                    },
                                    complete: () => {

                                       
                                    },
                                    failure: (reponse) => {
                                        console.log("failure", response);
                                    },
                                    error: (response) => {
                                        console.log("error", response);
                                    }
                                });
                            });

                            ulElementArticleQuestionsList.append(liElementArticleQuestion);
                        });

                        $("#article-questions-container").append(ulElementArticleQuestionsList);
                    }
                },
                complete: () => {

                    $("#article-questions-loader").hide();
                },
                failure: (reponse) => {
                    console.log("failure", response);
                },
                error: (response) => {
                    console.log("error", response);
                }
            });


            $("#article-like-button").click(() => {

                //Send ajax HTTP POST request to /Article/ArticleLike.
                $.ajax({
                    type: 'POST',
                    url: '/Article/ArticleLike',
                    data: {
                        'articleId': articleId
                    },
                    success: (response) => {

                    },
                    complete: () => {

                    },
                    failure: (reponse) => {
                        console.log("failure", response);
                    },
                    error: (response) => {
                        console.log("error", response);
                    }
                });
            });

            $("#user-comment-button").click(() => {

                const userComment = $("#user-comment").val();

                //Send ajax HTTP POST request to /Article/ArticleComment.
                $.ajax({
                    type: 'POST',
                    url: '/Article/ArticleComment',
                    data: {
                        'articleId': articleId,
                        'comment': userComment
                    },
                    success: (response) => {
                        //TODO: Load the response.
                    },
                    complete: () => {

                    },
                    failure: (reponse) => {
                        console.log("failure", response);
                    },
                    error: (response) => {
                        console.log("error", response);
                    }
                });
            });
        });

        function registerUserComment(articleCommentId) {

            if($("#user-comment-inputGroup-" + articleCommentId).length == 0){

                const divElementInputGroup = $("<div>", {
                    id: "user-comment-inputGroup-" + articleCommentId,
                    class: "input-group mt-2 mb-3"
                });

                const textareaElementComment = $("<textarea>", {
                    class: "form-control comment-textarea",
                    placeholder: "Write a comment..."
                });

                const spanElementButtonHolder = $("<span>", {
                    class: "ms-1"
                });

                const buttonElementComment = $("<button>", {
                    type: "button",
                    class: "btn btn-outline-dark btn-sm",
                    text: "Comment"
                });

                buttonElementComment.on("click", () => {

                    const articleId = $("#articleId").val();
                    const userComment = textareaElementComment.val();

                    //Send ajax HTTP GET request to /Article/ArticleChildComment.
                    $.ajax({
                        type: 'POST',
                        url: '/Article/ArticleChildComment',
                        data: {
                            'articleId': articleId,
                            'parentArticleCommentId': articleCommentId, //this is the id of the parent comment.
                            'comment': userComment
                        },
                        success: (response) => {
                            //TODO: Load the response.
                        },
                        complete: () => {

                        },
                        failure: (reponse) => {
                            console.log("failure", response);
                        },
                        error: (response) => {
                            console.log("error", response);
                        }
                    });
                });

                const buttonElementCommentCancel = $("<button>", {
                    type: "button",
                    class: "btn btn-outline-dark btn-sm",
                    text: "Cancel"
                });

                buttonElementCommentCancel.on("click", () => {

                    
                });

                spanElementButtonHolder.append(buttonElementComment);
                spanElementButtonHolder.append(buttonElementCommentCancel);
                divElementInputGroup.append(textareaElementComment);
                divElementInputGroup.append(spanElementButtonHolder);

                $("#comment-actions-" + articleCommentId).append(divElementInputGroup);
            }
        }

        function registerUserCommentLike(articleCommentId) {

            this.event.target.style.color = "green";

            $("#thumbs-down-" + articleCommentId).css("color", "black");

            //Send ajax HTTP POST request to /Article/ArticleCommentLike.
            $.ajax({
                type: 'POST',
                url: '/Article/ArticleCommentLike',
                data: {
                    'articleCommentId': articleCommentId
                },
                success: (response) => {
                    //TODO: Load the response.
                },
                complete: () => {

                },
                failure: (reponse) => {
                    console.log("failure", response);
                },
                error: (response) => {
                    console.log("error", response);
                }
            });
        }

        function registerUserCommentDislike(articleCommentId) {

            this.event.target.style.color = "red";

            $("#thumbs-up-" + articleCommentId).css("color", "black");

            //Send ajax HTTP POST request to /Article/ArticleCommentDislike.
            $.ajax({
                type: 'POST',
                url: '/Article/ArticleCommentDislike',
                data: {
                    'articleCommentId': articleCommentId
                },
                success: (response) => {
                    //TODO: Load the response.
                },
                complete: () => {

                },
                failure: (reponse) => {
                    console.log("failure", response);
                },
                error: (response) => {
                    console.log("error", response);
                }
            });
        }

    </script>
}