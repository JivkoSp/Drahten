// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TopicArticleService.Infrastructure.EntityFramework.Contexts;

#nullable disable

namespace TopicArticleService.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    partial class ReadDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("topic-article-service")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentDislikeReadModel", b =>
                {
                    b.Property<Guid>("ArticleCommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ArticleCommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleCommentDislike", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentLikeReadModel", b =>
                {
                    b.Property<Guid>("ArticleCommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ArticleCommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleCommentLike", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentReadModel", b =>
                {
                    b.Property<Guid>("ArticleCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ParentArticleCommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("ArticleCommentId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ParentArticleCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleComment", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleDislikeReadModel", b =>
                {
                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ArticleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleDislike", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleLikeReadModel", b =>
                {
                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ArticleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleLike", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", b =>
                {
                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrevTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublishingDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("ArticleId");

                    b.HasIndex("TopicId");

                    b.ToTable("Article", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.TopicReadModel", b =>
                {
                    b.Property<Guid>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentTopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("TopicId");

                    b.HasIndex("ParentTopicId");

                    b.ToTable("Topic", "topic-article-service");

                    b.HasData(
                        new
                        {
                            TopicId = new Guid("eb5756b6-e0b9-4a08-9067-92e9af115ed7"),
                            TopicName = "Cybersecurity",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("2a9d89b5-2a69-4e06-ae6e-819795a35704"),
                            TopicName = "Programming",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("bc97ad09-44ac-4a74-a6c5-6b0ccf0cab63"),
                            ParentTopicId = new Guid("eb5756b6-e0b9-4a08-9067-92e9af115ed7"),
                            TopicName = "News",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("35d2341d-2e8e-4732-b1fe-ff45192bb327"),
                            ParentTopicId = new Guid("eb5756b6-e0b9-4a08-9067-92e9af115ed7"),
                            TopicName = "Projects",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("37ca1cc4-deab-4ee2-b81f-503829a52cf2"),
                            ParentTopicId = new Guid("eb5756b6-e0b9-4a08-9067-92e9af115ed7"),
                            TopicName = "Laws",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("e01e9d76-2fed-402a-b344-e349b2ed679e"),
                            ParentTopicId = new Guid("eb5756b6-e0b9-4a08-9067-92e9af115ed7"),
                            TopicName = "Law regulations",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("33f17cb1-833d-409f-99b0-ae298ff6d1dc"),
                            ParentTopicId = new Guid("2a9d89b5-2a69-4e06-ae6e-819795a35704"),
                            TopicName = "News",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("b0dbdc91-d64b-4f01-86f7-f205b903b6ef"),
                            ParentTopicId = new Guid("2a9d89b5-2a69-4e06-ae6e-819795a35704"),
                            TopicName = "Projects",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("8eebb631-9b69-4fe7-925b-483ee41e007c"),
                            ParentTopicId = new Guid("bc97ad09-44ac-4a74-a6c5-6b0ccf0cab63"),
                            TopicName = "America",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("db1e3c53-a7e1-40a2-90cf-4cb3e6dc0718"),
                            ParentTopicId = new Guid("bc97ad09-44ac-4a74-a6c5-6b0ccf0cab63"),
                            TopicName = "Asia",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("444de8d2-4334-4b91-8f56-8c01815d21df"),
                            ParentTopicId = new Guid("bc97ad09-44ac-4a74-a6c5-6b0ccf0cab63"),
                            TopicName = "Europe",
                            Version = 0
                        });
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("User", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.UserArticleReadModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("UserArticle", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.UserTopicReadModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubscriptionTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("UserTopic", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentDislikeReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentReadModel", "ArticleComment")
                        .WithMany("ArticleCommentDislikes")
                        .HasForeignKey("ArticleCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArticleComment_ArticleCommentDislikes");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.User", "User")
                        .WithMany("ArticleCommentDislikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_User_ArticleCommentDislikes");

                    b.Navigation("ArticleComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentLikeReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentReadModel", "ArticleComment")
                        .WithMany("ArticleCommentLikes")
                        .HasForeignKey("ArticleCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArticleComment_ArticleCommentLikes");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.User", "User")
                        .WithMany("ArticleCommentLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_User_ArticleCommentLikes");

                    b.Navigation("ArticleComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", "Article")
                        .WithMany("ArticleComments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Article_ArticleComments");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentReadModel", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentArticleCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ParentArticleComment_ChildArticleComments");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.User", "User")
                        .WithMany("ArticleComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_User_ArticleComments");

                    b.Navigation("Article");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleDislikeReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", "Article")
                        .WithMany("ArticleDislikes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Article_ArticleDislikes");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.User", "User")
                        .WithMany("ArticleDislikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_User_ArticleDislikes");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleLikeReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", "Article")
                        .WithMany("ArticleLikes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Article_ArticleLikes");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.User", "User")
                        .WithMany("ArticleLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_User_ArticleLikes");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.TopicReadModel", "Topic")
                        .WithMany("Articles")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Topic_Articles");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.TopicReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.TopicReadModel", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ParentTopic_ChildTopics");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.UserArticleReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", "Article")
                        .WithMany("UserArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Article_UserArticles");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.User", "User")
                        .WithMany("UserArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_UserArticles");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.UserTopicReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.TopicReadModel", "Topic")
                        .WithMany("Users")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Topic_Users");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.User", "User")
                        .WithMany("Topics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_Topics");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentReadModel", b =>
                {
                    b.Navigation("ArticleCommentDislikes");

                    b.Navigation("ArticleCommentLikes");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", b =>
                {
                    b.Navigation("ArticleComments");

                    b.Navigation("ArticleDislikes");

                    b.Navigation("ArticleLikes");

                    b.Navigation("UserArticles");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.TopicReadModel", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Children");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.User", b =>
                {
                    b.Navigation("ArticleCommentDislikes");

                    b.Navigation("ArticleCommentLikes");

                    b.Navigation("ArticleComments");

                    b.Navigation("ArticleDislikes");

                    b.Navigation("ArticleLikes");

                    b.Navigation("Topics");

                    b.Navigation("UserArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
