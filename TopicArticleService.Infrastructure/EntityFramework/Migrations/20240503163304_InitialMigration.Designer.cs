// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TopicArticleService.Infrastructure.EntityFramework.Contexts;

#nullable disable

namespace TopicArticleService.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    [Migration("20240503163304_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("topic-article-service")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentDislikeReadModel", b =>
                {
                    b.Property<Guid>("ArticleCommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ArticleCommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleCommentDislike", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentLikeReadModel", b =>
                {
                    b.Property<Guid>("ArticleCommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ArticleCommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleCommentLike", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentReadModel", b =>
                {
                    b.Property<Guid>("ArticleCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentArticleCommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("ArticleCommentId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ParentArticleCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleComment", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleDislikeReadModel", b =>
                {
                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ArticleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleDislike", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleLikeReadModel", b =>
                {
                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ArticleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ArticleLike", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", b =>
                {
                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrevTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublishingDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("ArticleId");

                    b.HasIndex("TopicId");

                    b.ToTable("Article", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.TopicReadModel", b =>
                {
                    b.Property<Guid>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentTopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("TopicFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("TopicId");

                    b.HasIndex("ParentTopicId");

                    b.ToTable("Topic", "topic-article-service");

                    b.HasData(
                        new
                        {
                            TopicId = new Guid("eb2354be-d9d7-4ece-9d22-a0ca95c4280d"),
                            TopicFullName = "cybersecurity",
                            TopicName = "Cybersecurity",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("e7e4aa51-d49d-4fdc-a7e6-c59f0841d8c4"),
                            TopicFullName = "programming",
                            TopicName = "Programming",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("e0e68a89-8cb2-4602-a10b-2be1a78a9be5"),
                            ParentTopicId = new Guid("eb2354be-d9d7-4ece-9d22-a0ca95c4280d"),
                            TopicFullName = "cybersecurity_news",
                            TopicName = "News",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("082cf502-ed29-4eff-aa8c-92f2d6d1bfe5"),
                            ParentTopicId = new Guid("eb2354be-d9d7-4ece-9d22-a0ca95c4280d"),
                            TopicFullName = "cybersecurity_projects",
                            TopicName = "Projects",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("cebed78c-6a3d-498e-895d-3f50504b78c8"),
                            ParentTopicId = new Guid("eb2354be-d9d7-4ece-9d22-a0ca95c4280d"),
                            TopicFullName = "cybersecurity_laws",
                            TopicName = "Laws",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("c3908672-b7bd-4939-8518-745ff84e4da9"),
                            ParentTopicId = new Guid("eb2354be-d9d7-4ece-9d22-a0ca95c4280d"),
                            TopicFullName = "cybersecurity_law_regulations",
                            TopicName = "Law regulations",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("b4f3c668-c2d3-47fe-8d4d-8f6cef0f654e"),
                            ParentTopicId = new Guid("e7e4aa51-d49d-4fdc-a7e6-c59f0841d8c4"),
                            TopicFullName = "programming_news",
                            TopicName = "News",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("861c973c-d9b1-4c17-b293-3015292929d6"),
                            ParentTopicId = new Guid("e7e4aa51-d49d-4fdc-a7e6-c59f0841d8c4"),
                            TopicFullName = "programming_projects",
                            TopicName = "Projects",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("96c152bd-5f7d-4d09-b601-603e461ad018"),
                            ParentTopicId = new Guid("e0e68a89-8cb2-4602-a10b-2be1a78a9be5"),
                            TopicFullName = "cybersecurity_news_america",
                            TopicName = "America",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("0f2d5495-1105-4b09-ba8d-875a73872c49"),
                            ParentTopicId = new Guid("e0e68a89-8cb2-4602-a10b-2be1a78a9be5"),
                            TopicFullName = "cybersecurity_news_asia",
                            TopicName = "Asia",
                            Version = 0
                        },
                        new
                        {
                            TopicId = new Guid("8aaf44ab-12a9-48b2-a722-6d9f4e9f76c3"),
                            ParentTopicId = new Guid("e0e68a89-8cb2-4602-a10b-2be1a78a9be5"),
                            TopicFullName = "cybersecurity_news_europe",
                            TopicName = "Europe",
                            Version = 0
                        });
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.UserArticleReadModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ArticleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("UserArticle", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.UserReadModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("User", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.UserTopicReadModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SubscriptionTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("UserTopic", "topic-article-service");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentDislikeReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentReadModel", "ArticleComment")
                        .WithMany("ArticleCommentDislikes")
                        .HasForeignKey("ArticleCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArticleComment_ArticleCommentDislikes");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("ArticleCommentDislikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_User_ArticleCommentDislikes");

                    b.Navigation("ArticleComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentLikeReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentReadModel", "ArticleComment")
                        .WithMany("ArticleCommentLikes")
                        .HasForeignKey("ArticleCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArticleComment_ArticleCommentLikes");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("ArticleCommentLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_User_ArticleCommentLikes");

                    b.Navigation("ArticleComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", "Article")
                        .WithMany("ArticleComments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Article_ArticleComments");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentReadModel", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentArticleCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ParentArticleComment_ChildArticleComments");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("ArticleComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_User_ArticleComments");

                    b.Navigation("Article");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleDislikeReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", "Article")
                        .WithMany("ArticleDislikes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Article_ArticleDislikes");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("ArticleDislikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_User_ArticleDislikes");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleLikeReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", "Article")
                        .WithMany("ArticleLikes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Article_ArticleLikes");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("ArticleLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_User_ArticleLikes");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.TopicReadModel", "Topic")
                        .WithMany("Articles")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("FK_Topic_Articles");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.TopicReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.TopicReadModel", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ParentTopic_ChildTopics");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.UserArticleReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", "Article")
                        .WithMany("UserArticles")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Article_UserArticles");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("UserArticles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_UserArticles");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.UserTopicReadModel", b =>
                {
                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.TopicReadModel", "Topic")
                        .WithMany("Users")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Topic_Users");

                    b.HasOne("TopicArticleService.Infrastructure.EntityFramework.Models.UserReadModel", "User")
                        .WithMany("Topics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_Topics");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleCommentReadModel", b =>
                {
                    b.Navigation("ArticleCommentDislikes");

                    b.Navigation("ArticleCommentLikes");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.ArticleReadModel", b =>
                {
                    b.Navigation("ArticleComments");

                    b.Navigation("ArticleDislikes");

                    b.Navigation("ArticleLikes");

                    b.Navigation("UserArticles");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.TopicReadModel", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Children");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TopicArticleService.Infrastructure.EntityFramework.Models.UserReadModel", b =>
                {
                    b.Navigation("ArticleCommentDislikes");

                    b.Navigation("ArticleCommentLikes");

                    b.Navigation("ArticleComments");

                    b.Navigation("ArticleDislikes");

                    b.Navigation("ArticleLikes");

                    b.Navigation("Topics");

                    b.Navigation("UserArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
